/* ATTENTION! THIS FILE GENERATED BY IDL2C, DO NOT EDIT! */

#ifndef __INTERFACE_THREAD_CONTROL_H__
#define __INTERFACE_THREAD_CONTROL_H__

#define IID_THREAD_CONTROL 0x00000007

enum
{
    MID_THREAD_CONTROL_NAME_SET,
    MID_THREAD_CONTROL_NAME_GET,
    MID_THREAD_CONTROL_LOCK,
    MID_THREAD_CONTROL_UNLOCK,
    MID_THREAD_CONTROL_YIELD,
};

typedef void (thread_control_name_set_function_t) (
    context_t *context /* THIS  */,
    void * name /* IN */);

typedef void (thread_control_name_get_function_t) (
    context_t *context /* THIS  */,
    void name /* IN */);

typedef void (thread_control_lock_function_t) (
    context_t *context /* THIS  */);

typedef void (thread_control_unlock_function_t) (
    context_t *context /* THIS  */);

typedef void (thread_control_yield_function_t) (
    context_t *context /* THIS  */);


typedef struct
{
    thread_control_name_set_function_t *name_set;
    thread_control_name_get_function_t *name_get;
    thread_control_lock_function_t *lock;
    thread_control_unlock_function_t *unlock;
    thread_control_yield_function_t *yield;
} interface_thread_control_t;

typedef struct
{
    thread_control_name_set_function_t *function;
    method_id_t method_id;
    uint32_t parameters_size;
    uint32_t number_of_parameters;
    parameter_t parameters[1];
} thread_control_name_set_method_t;

typedef struct
{
    void * name;
} thread_control_name_set_parameters_t;

#define THREAD_CONTROL_NAME_SET_METHOD(function) \
    (&(function)), \
    (MID_THREAD_CONTROL_NAME_SET), \
    (sizeof (thread_control_name_set_parameters_t)), \
    (1), \
    { \
        {sizeof (void *)} \
    }

typedef struct
{
    thread_control_name_get_function_t *function;
    method_id_t method_id;
    uint32_t parameters_size;
    uint32_t number_of_parameters;
    parameter_t parameters[1];
} thread_control_name_get_method_t;

typedef struct
{
    void name;
} thread_control_name_get_parameters_t;

#define THREAD_CONTROL_NAME_GET_METHOD(function) \
    (&(function)), \
    (MID_THREAD_CONTROL_NAME_GET), \
    (sizeof (thread_control_name_get_parameters_t)), \
    (1), \
    { \
        {sizeof (void)} \
    }

typedef struct
{
    thread_control_lock_function_t *function;
    method_id_t method_id;
    uint32_t parameters_size;
    uint32_t number_of_parameters;
    parameter_t parameters[0];
} thread_control_lock_method_t;

#define THREAD_CONTROL_LOCK_METHOD(function) \
    (&(function)), \
    (MID_THREAD_CONTROL_LOCK), \
    (0), \
    (0)

typedef struct
{
    thread_control_unlock_function_t *function;
    method_id_t method_id;
    uint32_t parameters_size;
    uint32_t number_of_parameters;
    parameter_t parameters[0];
} thread_control_unlock_method_t;

#define THREAD_CONTROL_UNLOCK_METHOD(function) \
    (&(function)), \
    (MID_THREAD_CONTROL_UNLOCK), \
    (0), \
    (0)

typedef struct
{
    thread_control_yield_function_t *function;
    method_id_t method_id;
    uint32_t parameters_size;
    uint32_t number_of_parameters;
    parameter_t parameters[0];
} thread_control_yield_method_t;

#define THREAD_CONTROL_YIELD_METHOD(function) \
    (&(function)), \
    (MID_THREAD_CONTROL_YIELD), \
    (0), \
    (0)

#define thread_control$name_set(handle,name) \
    ((thread_control_interface_t *) ((handle)->functions))->name_set \
    ( \
        &((handle)->context), \
        (name) \
    )

#define thread_control$name_get(handle,name) \
    ((thread_control_interface_t *) ((handle)->functions))->name_get \
    ( \
        &((handle)->context), \
        (name) \
    )

#define thread_control$lock(handle) \
    ((thread_control_interface_t *) ((handle)->functions))->lock \
    ( \
        &((handle)->context) \
    )

#define thread_control$unlock(handle) \
    ((thread_control_interface_t *) ((handle)->functions))->unlock \
    ( \
        &((handle)->context) \
    )

#define thread_control$yield(handle) \
    ((thread_control_interface_t *) ((handle)->functions))->yield \
    ( \
        &((handle)->context) \
    )

#endif /* !__INTERFACE_THREAD_CONTROL_H__ */

