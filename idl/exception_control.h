/* ATTENTION! THIS FILE GENERATED BY IDL2C, DO NOT EDIT! */

#ifndef __INTERFACE_EXCEPTION_CONTROL_H__
#define __INTERFACE_EXCEPTION_CONTROL_H__

#define IID_EXCEPTION_CONTROL 0x00000008

enum
{
    MID_EXCEPTION_CONTROL_ADD_HANDLER,
    MID_EXCEPTION_CONTROL_REMOVE_HANDLER,
    MID_EXCEPTION_CONTROL_INVOKE_HANDLER,
};

typedef void (exception_control_add_handler_function_t) (
    context_t *context /* THIS  */,
    exception_context_t * exception_context /* IN */);

typedef void (exception_control_remove_handler_function_t) (
    context_t *context /* THIS  */);

typedef void (exception_control_invoke_handler_function_t) (
    context_t *context /* THIS  */,
    exception_info_t * info /* IN */);


typedef struct
{
    exception_control_add_handler_function_t *add_handler;
    exception_control_remove_handler_function_t *remove_handler;
    exception_control_invoke_handler_function_t *invoke_handler;
} interface_exception_control_t;

typedef struct
{
    exception_control_add_handler_function_t *function;
    method_id_t method_id;
    uint32_t parameters_size;
    uint32_t number_of_parameters;
    parameter_t parameters[1];
} exception_control_add_handler_method_t;

typedef struct
{
    exception_context_t * exception_context;
} exception_control_add_handler_parameters_t;

#define EXCEPTION_CONTROL_ADD_HANDLER_METHOD(function) \
    (&(function)), \
    (MID_EXCEPTION_CONTROL_ADD_HANDLER), \
    (sizeof (exception_control_add_handler_parameters_t)), \
    (1), \
    { \
        {sizeof (exception_context_t *)} \
    }

typedef struct
{
    exception_control_remove_handler_function_t *function;
    method_id_t method_id;
    uint32_t parameters_size;
    uint32_t number_of_parameters;
    parameter_t parameters[0];
} exception_control_remove_handler_method_t;

#define EXCEPTION_CONTROL_REMOVE_HANDLER_METHOD(function) \
    (&(function)), \
    (MID_EXCEPTION_CONTROL_REMOVE_HANDLER), \
    (0), \
    (0)

typedef struct
{
    exception_control_invoke_handler_function_t *function;
    method_id_t method_id;
    uint32_t parameters_size;
    uint32_t number_of_parameters;
    parameter_t parameters[1];
} exception_control_invoke_handler_method_t;

typedef struct
{
    exception_info_t * info;
} exception_control_invoke_handler_parameters_t;

#define EXCEPTION_CONTROL_INVOKE_HANDLER_METHOD(function) \
    (&(function)), \
    (MID_EXCEPTION_CONTROL_INVOKE_HANDLER), \
    (sizeof (exception_control_invoke_handler_parameters_t)), \
    (1), \
    { \
        {sizeof (exception_info_t *)} \
    }

#define exception_control$add_handler(handle,exception_context) \
    ((exception_control_interface_t *) ((handle)->functions))->add_handler \
    ( \
        &((handle)->context), \
        (exception_context) \
    )

#define exception_control$remove_handler(handle) \
    ((exception_control_interface_t *) ((handle)->functions))->remove_handler \
    ( \
        &((handle)->context) \
    )

#define exception_control$invoke_handler(handle,info) \
    ((exception_control_interface_t *) ((handle)->functions))->invoke_handler \
    ( \
        &((handle)->context), \
        (info) \
    )

#endif /* !__INTERFACE_EXCEPTION_CONTROL_H__ */

