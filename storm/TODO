TODO ($Id: TODO,v 1.4 2000/10/21 18:26:20 plundis Exp $)
====

(In no special order)

storm 0.5.0
-----------

  * Fix all known bugs. (yeah, right! All critical ones at least.)
  * FIX AVL_NODE_DELETE!!! Or whatever is thrashing our AVL trees. 

storm 0.6.0
-----------

  * Make the idle thread have a list of tasks that need to be done.
  * Capabilities. We only need the basic stuff (like, is this thread
    allowed to change the status of other threads?). Most real work will be
    done by the security server.
  * Move header files. Think about how it really should be.
  * Increase the granularity of the mutexing. I.e., the whole mailbox
    tree shouldn't have to be locked whenever a mailbox is accessed, etc.
  * Generic code should be put in the generic subdirectories to ease
    future portings to other systems. We should give this some time.
  * Better kernelfs interface. More data should be available.
  * Use int and unsigned int everywhere feasible. Audit the code and
    make sure this is so.
  * Shared memory!!!
  * FPU support and FPU emulation?
  * Check how the thread_create () function works (and should
    work...).

storm 0.7.0
-----------

  * Finish up the new scheduler.
  * Implement soft real time priority and use it for the interrupt
    handler threads. Right now, the latency can be far too high at
    times.
  * Create system_call_memory_virtual_server () and
    system_call_memory_virtual_client ().
  * Support FPU.

storm 1.0.0
-----------

  * SMP.
  * Alpha port.
  * Sparc port. Sparc64 if we can get a machine.
  * M68k port. (Amiga and Macintosh primarily)
  * PPC? If we can get someone to lend us hardware... or letting
    someone else do the dirty work.
  * StrongARM and other exotics too if someone is willing to help out.
  * Fix all FIXMEs, and all bugs.

storm X.Y.Z
------------

  * Optimize for SSE, 3DNow! and Enhanced 3DNow! Fix the MMX code.
  * Implement support for hierarchical thread-system:
     * process (program).
     * cluster (collection of threads sharing only process' code).
     * thread (threads sharing the cluster's data).
