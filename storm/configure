#! /usr/bin/perl -w

# Abstract: Script for configuring this package.

# Copyright 2000 chaos development. This script is in the public domain.

# Please note that this script was automatically generated by
# autochaos 0.2.0. It should not be modified. Do the changes you
# want in autochaos instead.

use strict;
use POSIX;

my $default_root = "/";
my $chaos_root = undef;
my @libraries = ();
my @headers = ();
my @sources = ();
my @objects = ();
my @deps = ();
my $MAKEFILE;
my $TEMPLATE;
my $root_dir = getcwd ();
my %options = 
(
  'release' => 'FALSE',
);

my $install_prefix_flag = 0;

foreach my $argument (@ARGV)
{
  if ($install_prefix_flag eq 1)
  {
    $default_root = $argument;
    $install_prefix_flag = 0;
  }
  else
  {
    if ($argument eq '--install-prefix')
    {
      $install_prefix_flag = 1;
    }
    elsif ($argument =~ m/--enable-.*$/)
    {
      (my $option) = ($argument =~ m/--enable-(.*)$/);

      if ($options{$option})
      {
        $options{$option} = 'TRUE';
      }
      else
      {
        print "Unrecognised command line option.\n";
        exit 1;
      }
    }
    elsif ($argument =~ m/--disable-.*$/)
    {
      (my $option) = ($argument =~ m/--disable-(.*)$/);

      if ($options{$option})
      {
        $options{$option} = 'FALSE';
      }
      else
      {
        print "Unrecognised command line option.\n";
        exit 1;
      }
    }
    else
    {
      print "Unrecognised command line option.\n";
      exit 1;
    }
  }
}

if ($install_prefix_flag eq 1)
{
  print "Malformed --install-prefix command option. Value missing.\n";
  exit 1;
}

print "\n  Configuring kernel: storm...\n\n";

print ("Detecting chaos root...\n");

print "Trying default root ($default_root)... ";

if (-d "$default_root/system/kernel")
{
  print "found.\n";
  $chaos_root = $default_root;
}
else
{
  print "not found.\n";

  print "Trying /mnt/chaos... ";

  if (-d "/mnt/chaos/system/kernel")
  {
    print "found.\n";
    $chaos_root = "/mnt/chaos";
  }

  unless ($chaos_root)
  {
    $chaos_root = "/tmp/chaos";
    print "not found.\nFalling back to $chaos_root.\n";
  }
}


my $all_arguments = "";
foreach my $argument (@ARGV)
{
  $all_arguments .= $argument . " ";
}

print ("Checking for autochaos... ");
my $autochaos = `autochaos --version 2> /dev/null`;

my $has_autochaos;
unless ($autochaos)
{
  print ("not found.\n");
  $has_autochaos = undef;
}
else
{
  (my $version) = ($autochaos =~ m/ ([\d\.]+)$/);
  print ("found (version $version).\n");
  $has_autochaos = $version;
}



@headers = (
'defines.h',
'dma.h',
'return_values.h',
'kernelfs.h',
'limits.h',
'mailbox.h',
'process.h',
'thread.h',
'types.h',
'service.h',
'state.h',
'storm.h',
'system_calls.h',
'tag.h',
);

@sources = (
);
@objects = ();
@deps = ();
  print "Writing include/storm/makefile...
";
  open (MAKEFILE, '>' . "include/storm/makefile") or
    die ("Could not write to include/storm/makefile: $!\n");
 
# Write the default rules we want.

  print (MAKEFILE <<STOP);
# This makefile was generated by autochaos 0.2.0. Please do not
# tamper with it unless you are very certain about what you are doing.

ALL_ARGUMENTS = $all_arguments

PREFIX = $chaos_root
PACKAGE = storm

# Compiler flags.

CFLAGS = -Wall -W -Wshadow -Wpointer-arith -Waggregate-return \\
-Wstrict-prototypes -Wredundant-decls -Winline -Wmissing-prototypes \\
-Werror -Wcast-align -Wbad-function-cast -Wsign-compare \\
-Wmissing-declarations -Wmissing-noreturns -pipe \\
-Wnested-externs -O3 -fno-builtin -funsigned-char -g -fomit-frame-pointer -ffreestanding \$(EXTRA_CFLAGS) \$(DEFINES)

INCLUDES = \\
STOP
  print MAKEFILE "-I../include \\\
";
  print MAKEFILE "-I.. \\\
";
print (MAKEFILE <<STOP);
-I. -I\$(PREFIX)/data/programming/c/headers
STOP
  print MAKEFILE "\
SUB_DIRECTORIES =";
  print MAKEFILE " \\\
generic";
  print MAKEFILE " \\\
ia32";
print (MAKEFILE <<STOP);

STATIC_LIBRARY_PATH = \$(PREFIX)/data/programming/libraries/static

# Ideally, this would be -lwhatever, but we have not started patching
# the GNU tools yet...

STOP

  print (MAKEFILE "LIBS = ");
  foreach my $library (@libraries)
  {
    print MAKEFILE "\\\
\$(STATIC_LIBRARY_PATH)/library_$library.a ";
  }

  if (scalar @objects > 0)
  {
    print MAKEFILE "\n\nOBJECTS = ";
    foreach my $object (@objects)
    {
      print MAKEFILE " \\\
$object";
    }
    print MAKEFILE "\
";
  }

  if (scalar @headers > 0)
  {
    print MAKEFILE "\n\nHEADERS = ";
    foreach my $header (@headers)
    {
      print MAKEFILE " \\\
$header";
    }
    print MAKEFILE "\
";
  }

  if (scalar @sources > 0)
  {
    print MAKEFILE "\n\nSOURCES = ";
    foreach my $source (@sources)
    {
      print MAKEFILE " \\\
$source";
    }
    print MAKEFILE "\
";
    
  }

  print (MAKEFILE <<STOP);

HEADER_PATH = \$(PREFIX)/data/programming/c/headers/\$(PACKAGE)/

# TODO: Those should be overridable.

CC = gcc
NASM = nasm
AR = ar
RANLIB = ranlib
GZIP = gzip -f

%.o: %.c
	\@echo Compiling \$<...
	\@\$(CC) -o \$(@) \$(CFLAGS) \$(INCLUDES) \$(DEFS) -c \$<
	\@\$(CC) -M \$< \$(CFLAGS) \$(INCLUDES) \$(DEFS) > \$(*F).dep

%.o: %.S
	\@echo Compiling \$<...
	\@\$(CC) -o \$(@) \$(CFLAGS) \$(INCLUDES) \$(DEFS) -c \$<
	\@\$(CC) -M \$< \$(CFLAGS) \$(INCLUDES) \$(DEFS) > \$(*F).dep

%.o: %.asm
	\$(NASM) -o \$(@) \$< -f elf

.PHONY: splash all clean install package-source

STOP
 
  {
    my $target = "\$(OBJECTS)" if (scalar @objects);

    unless ($target)
    {
      $target = "";
    }

    print (MAKEFILE <<STOP);
all: splash makefile $target
STOP
     print (MAKEFILE <<STOP);
	\@for sub_directory in \$(SUB_DIRECTORIES) ; do (cd \$\$sub_directory && echo -e "\\n  Compiling directory: \$\$sub_directory\\n" && \$(MAKE)) || exit ; done
STOP

  }
    if (!(scalar @objects) && '\$(OBJECTS)' ne '\$(OBJECTS)')
    {
  print (MAKEFILE <<STOP);
	\@\$(MAKE) \$(OBJECTS)
STOP
    }
  print (MAKEFILE <<STOP);

clean: makefile
STOP
    print (MAKEFILE <<STOP);
	\@for sub_directory in \$(SUB_DIRECTORIES) ; do (cd \$\$sub_directory && \$(MAKE) clean) || exit ; done
STOP
  if (scalar @objects > 0)
  {
    print MAKEFILE "	rm -f \$(OBJECTS)
";
  }
  print (MAKEFILE <<STOP);
	rm -f *.dep
	-\$(MAKE) clean-local
STOP
     print MAKEFILE "splash:

";
     print (MAKEFILE <<STOP);

LDFLAGS = -nostdlib -Wl,-T,current-arch/kernel.ld -lgcc \$(EXTRA_LDFLAGS)

storm: \$(OBJECTS) \$(ALL_OBJECTS)
	\@echo "Linking..."
	\@\$(CC) -o \$(\@) \$(OBJECTS) \$(ALL_OBJECTS) \$(LIBS) \$(LDFLAGS)

install: all
STOP
    print (MAKEFILE <<STOP);
	\@for sub_directory in \$(SUB_DIRECTORIES) ; do (cd \$\$sub_directory && \$(MAKE) install) || exit ; done
STOP

    if (scalar @headers > 0)
    {
      print (MAKEFILE <<STOP);
	mkdir -p \$(HEADER_PATH)
	for header in \$(HEADERS) ; do cp \$\$header \$(HEADER_PATH) ; done
STOP
    }
  print (MAKEFILE "\n");

  print (MAKEFILE <<STOP);
package-source:
STOP
    print (MAKEFILE <<STOP);
	\@for sub_directory in \$(SUB_DIRECTORIES) ; do (cd \$\$sub_directory && \$(MAKE) package-source) || exit ; done
STOP
print (MAKEFILE <<STOP);
	mkdir -p $root_dir/package-source/include/storm
STOP

  print (MAKEFILE <<STOP);
	-cp -f makefile.template \$(EXTRA_FILES) $root_dir/package-source/include/storm
STOP
     
    if (scalar @headers > 0)
    {
      print (MAKEFILE <<STOP);
	for header in \$(HEADERS) ; do cp \$\$header $root_dir/package-source/include/storm ; done
STOP
    }

    if (scalar @sources > 0)
    {
      print (MAKEFILE <<STOP);
	for source in \$(SOURCES) ; do cp \$\$source $root_dir/package-source/include/storm ; done
STOP
    }

  print (MAKEFILE <<STOP);
package-check: package-source
	     cd package-source && ./configure \$(ALL_ARGUMENTS) && \$(MAKE) && \$(MAKE) clean
	     find package-source -name makefile -exec rm {} ';'
	     rm package-source/config.h
STOP

  print (MAKEFILE <<STOP);
package: package-check
	rm -rf storm-0.5.0
	mv package-source storm-0.5.0
	tar cvIf storm-0.5.0.tar.bz2 storm-0.5.0
	     
STOP

  # Include automatically generated dependencies.

  if (scalar @deps > 0)
  {
    foreach my $dep (@deps)
    {
      print (MAKEFILE "-include $dep\n");
    }
  }

  print (MAKEFILE "\n");

  if (open (TEMPLATE, "include/storm" . "/makefile.template"))
  {
    while (<TEMPLATE>)
    {
      my $row = $_;

      print (MAKEFILE $row);
    }
  }
  close (MAKEFILE);



@headers = (
'arguments.h',
'avl.h',
'avl_debug.h',
'avl_rotate.h',
'avl_update.h',
'avl_delete.h',
'bit.h',
'capability.h',
'cpu.h',
'dataarea.h',
'debug.h',
'defines.h',
'dispatch.h',
'elf.h',
'idle.h',
'init.h',
'irq.h',
'kernelfs.h',
'log.h',
'limits.h',
'mailbox.h',
'memory.h',
'multiboot.h',
'mutex.h',
'memory_global.h',
'memory_physical.h',
'memory_virtual.h',
'port.h',
'process.h',
'return_values.h',
'service.h',
'slab.h',
'string.h',
'tag.h',
'thread.h',
'time.h',
'types.h',
);

@sources = (
);
@objects = ();
@deps = ();
  print "Writing include/storm/generic/makefile...
";
  open (MAKEFILE, '>' . "include/storm/generic/makefile") or
    die ("Could not write to include/storm/generic/makefile: $!\n");
 
# Write the default rules we want.

  print (MAKEFILE <<STOP);
# This makefile was generated by autochaos 0.2.0. Please do not
# tamper with it unless you are very certain about what you are doing.

ALL_ARGUMENTS = $all_arguments

PREFIX = $chaos_root
PACKAGE = storm

# Compiler flags.

CFLAGS = -Wall -W -Wshadow -Wpointer-arith -Waggregate-return \\
-Wstrict-prototypes -Wredundant-decls -Winline -Wmissing-prototypes \\
-Werror -Wcast-align -Wbad-function-cast -Wsign-compare \\
-Wmissing-declarations -Wmissing-noreturns -pipe \\
-Wnested-externs -O3 -fno-builtin -funsigned-char -g -fomit-frame-pointer -ffreestanding \$(EXTRA_CFLAGS) \$(DEFINES)

INCLUDES = \\
STOP
  print MAKEFILE "-I../include \\\
";
  print MAKEFILE "-I.. \\\
";
print (MAKEFILE <<STOP);
-I. -I\$(PREFIX)/data/programming/c/headers
STOP
print (MAKEFILE <<STOP);

STATIC_LIBRARY_PATH = \$(PREFIX)/data/programming/libraries/static

# Ideally, this would be -lwhatever, but we have not started patching
# the GNU tools yet...

STOP

  print (MAKEFILE "LIBS = ");
  foreach my $library (@libraries)
  {
    print MAKEFILE "\\\
\$(STATIC_LIBRARY_PATH)/library_$library.a ";
  }

  if (scalar @objects > 0)
  {
    print MAKEFILE "\n\nOBJECTS = ";
    foreach my $object (@objects)
    {
      print MAKEFILE " \\\
$object";
    }
    print MAKEFILE "\
";
  }

  if (scalar @headers > 0)
  {
    print MAKEFILE "\n\nHEADERS = ";
    foreach my $header (@headers)
    {
      print MAKEFILE " \\\
$header";
    }
    print MAKEFILE "\
";
  }

  if (scalar @sources > 0)
  {
    print MAKEFILE "\n\nSOURCES = ";
    foreach my $source (@sources)
    {
      print MAKEFILE " \\\
$source";
    }
    print MAKEFILE "\
";
    
  }

  print (MAKEFILE <<STOP);

HEADER_PATH = \$(PREFIX)/data/programming/c/headers/\$(PACKAGE)//generic

# TODO: Those should be overridable.

CC = gcc
NASM = nasm
AR = ar
RANLIB = ranlib
GZIP = gzip -f

%.o: %.c
	\@echo Compiling \$<...
	\@\$(CC) -o \$(@) \$(CFLAGS) \$(INCLUDES) \$(DEFS) -c \$<
	\@\$(CC) -M \$< \$(CFLAGS) \$(INCLUDES) \$(DEFS) > \$(*F).dep

%.o: %.S
	\@echo Compiling \$<...
	\@\$(CC) -o \$(@) \$(CFLAGS) \$(INCLUDES) \$(DEFS) -c \$<
	\@\$(CC) -M \$< \$(CFLAGS) \$(INCLUDES) \$(DEFS) > \$(*F).dep

%.o: %.asm
	\$(NASM) -o \$(@) \$< -f elf

.PHONY: splash all clean install package-source

STOP
 
  {
    my $target = "\$(OBJECTS)" if (scalar @objects);

    unless ($target)
    {
      $target = "";
    }

    print (MAKEFILE <<STOP);
all: splash makefile $target
STOP

  }
    if (!(scalar @objects) && '\$(OBJECTS)' ne '\$(OBJECTS)')
    {
  print (MAKEFILE <<STOP);
	\@\$(MAKE) \$(OBJECTS)
STOP
    }
  print (MAKEFILE <<STOP);

clean: makefile
STOP
  if (scalar @objects > 0)
  {
    print MAKEFILE "	rm -f \$(OBJECTS)
";
  }
  print (MAKEFILE <<STOP);
	rm -f *.dep
	-\$(MAKE) clean-local
STOP
     print MAKEFILE "splash:

";
     print (MAKEFILE <<STOP);

LDFLAGS = -nostdlib -Wl,-T,current-arch/kernel.ld -lgcc \$(EXTRA_LDFLAGS)

storm: \$(OBJECTS) \$(ALL_OBJECTS)
	\@echo "Linking..."
	\@\$(CC) -o \$(\@) \$(OBJECTS) \$(ALL_OBJECTS) \$(LIBS) \$(LDFLAGS)

install: all
STOP
  print (MAKEFILE "\n");

  print (MAKEFILE <<STOP);
package-source:
STOP
print (MAKEFILE <<STOP);
	mkdir -p $root_dir/package-source/include/storm/generic
STOP

  print (MAKEFILE <<STOP);
	-cp -f makefile.template \$(EXTRA_FILES) $root_dir/package-source/include/storm/generic
STOP
     
    if (scalar @headers > 0)
    {
      print (MAKEFILE <<STOP);
	for header in \$(HEADERS) ; do cp \$\$header $root_dir/package-source/include/storm/generic ; done
STOP
    }

    if (scalar @sources > 0)
    {
      print (MAKEFILE <<STOP);
	for source in \$(SOURCES) ; do cp \$\$source $root_dir/package-source/include/storm/generic ; done
STOP
    }

  print (MAKEFILE <<STOP);
package-check: package-source
	     cd package-source && ./configure \$(ALL_ARGUMENTS) && \$(MAKE) && \$(MAKE) clean
	     find package-source -name makefile -exec rm {} ';'
	     rm package-source/config.h
STOP

  print (MAKEFILE <<STOP);
package: package-check
	rm -rf storm-0.5.0
	mv package-source storm-0.5.0
	tar cvIf storm-0.5.0.tar.bz2 storm-0.5.0
	     
STOP

  # Include automatically generated dependencies.

  if (scalar @deps > 0)
  {
    foreach my $dep (@deps)
    {
      print (MAKEFILE "-include $dep\n");
    }
  }

  print (MAKEFILE "\n");

  if (open (TEMPLATE, "include/storm/generic" . "/makefile.template"))
  {
    while (<TEMPLATE>)
    {
      my $row = $_;

      print (MAKEFILE $row);
    }
  }
  close (MAKEFILE);



@headers = (
);

@sources = (
);
@objects = ();
@deps = ();
  print "Writing include/makefile...
";
  open (MAKEFILE, '>' . "include/makefile") or
    die ("Could not write to include/makefile: $!\n");
 
# Write the default rules we want.

  print (MAKEFILE <<STOP);
# This makefile was generated by autochaos 0.2.0. Please do not
# tamper with it unless you are very certain about what you are doing.

ALL_ARGUMENTS = $all_arguments

PREFIX = $chaos_root
PACKAGE = storm

# Compiler flags.

CFLAGS = -Wall -W -Wshadow -Wpointer-arith -Waggregate-return \\
-Wstrict-prototypes -Wredundant-decls -Winline -Wmissing-prototypes \\
-Werror -Wcast-align -Wbad-function-cast -Wsign-compare \\
-Wmissing-declarations -Wmissing-noreturns -pipe \\
-Wnested-externs -O3 -fno-builtin -funsigned-char -g -fomit-frame-pointer -ffreestanding \$(EXTRA_CFLAGS) \$(DEFINES)

INCLUDES = \\
STOP
  print MAKEFILE "-I../include \\\
";
  print MAKEFILE "-I.. \\\
";
print (MAKEFILE <<STOP);
-I. -I\$(PREFIX)/data/programming/c/headers
STOP
  print MAKEFILE "\
SUB_DIRECTORIES =";
  print MAKEFILE " \\\
storm";
print (MAKEFILE <<STOP);

STATIC_LIBRARY_PATH = \$(PREFIX)/data/programming/libraries/static

# Ideally, this would be -lwhatever, but we have not started patching
# the GNU tools yet...

STOP

  print (MAKEFILE "LIBS = ");
  foreach my $library (@libraries)
  {
    print MAKEFILE "\\\
\$(STATIC_LIBRARY_PATH)/library_$library.a ";
  }

  if (scalar @objects > 0)
  {
    print MAKEFILE "\n\nOBJECTS = ";
    foreach my $object (@objects)
    {
      print MAKEFILE " \\\
$object";
    }
    print MAKEFILE "\
";
  }

  if (scalar @headers > 0)
  {
    print MAKEFILE "\n\nHEADERS = ";
    foreach my $header (@headers)
    {
      print MAKEFILE " \\\
$header";
    }
    print MAKEFILE "\
";
  }

  if (scalar @sources > 0)
  {
    print MAKEFILE "\n\nSOURCES = ";
    foreach my $source (@sources)
    {
      print MAKEFILE " \\\
$source";
    }
    print MAKEFILE "\
";
    
  }

  print (MAKEFILE <<STOP);

HEADER_PATH = \$(PREFIX)/data/programming/c/headers/\$(PACKAGE)/include

# TODO: Those should be overridable.

CC = gcc
NASM = nasm
AR = ar
RANLIB = ranlib
GZIP = gzip -f

%.o: %.c
	\@echo Compiling \$<...
	\@\$(CC) -o \$(@) \$(CFLAGS) \$(INCLUDES) \$(DEFS) -c \$<
	\@\$(CC) -M \$< \$(CFLAGS) \$(INCLUDES) \$(DEFS) > \$(*F).dep

%.o: %.S
	\@echo Compiling \$<...
	\@\$(CC) -o \$(@) \$(CFLAGS) \$(INCLUDES) \$(DEFS) -c \$<
	\@\$(CC) -M \$< \$(CFLAGS) \$(INCLUDES) \$(DEFS) > \$(*F).dep

%.o: %.asm
	\$(NASM) -o \$(@) \$< -f elf

.PHONY: splash all clean install package-source

STOP
 
  {
    my $target = "\$(OBJECTS)" if (scalar @objects);

    unless ($target)
    {
      $target = "";
    }

    print (MAKEFILE <<STOP);
all: splash makefile $target
STOP
     print (MAKEFILE <<STOP);
	\@for sub_directory in \$(SUB_DIRECTORIES) ; do (cd \$\$sub_directory && echo -e "\\n  Compiling directory: \$\$sub_directory\\n" && \$(MAKE)) || exit ; done
STOP

  }
    if (!(scalar @objects) && '\$(OBJECTS)' ne '\$(OBJECTS)')
    {
  print (MAKEFILE <<STOP);
	\@\$(MAKE) \$(OBJECTS)
STOP
    }
  print (MAKEFILE <<STOP);

clean: makefile
STOP
    print (MAKEFILE <<STOP);
	\@for sub_directory in \$(SUB_DIRECTORIES) ; do (cd \$\$sub_directory && \$(MAKE) clean) || exit ; done
STOP
  if (scalar @objects > 0)
  {
    print MAKEFILE "	rm -f \$(OBJECTS)
";
  }
  print (MAKEFILE <<STOP);
	rm -f *.dep
	-\$(MAKE) clean-local
STOP
     print MAKEFILE "splash:

";
     print (MAKEFILE <<STOP);

LDFLAGS = -nostdlib -Wl,-T,current-arch/kernel.ld -lgcc \$(EXTRA_LDFLAGS)

storm: \$(OBJECTS) \$(ALL_OBJECTS)
	\@echo "Linking..."
	\@\$(CC) -o \$(\@) \$(OBJECTS) \$(ALL_OBJECTS) \$(LIBS) \$(LDFLAGS)

install: all
STOP
    print (MAKEFILE <<STOP);
	\@for sub_directory in \$(SUB_DIRECTORIES) ; do (cd \$\$sub_directory && \$(MAKE) install) || exit ; done
STOP

    if (scalar @headers > 0)
    {
      print (MAKEFILE <<STOP);
	mkdir -p \$(HEADER_PATH)
	for header in \$(HEADERS) ; do cp \$\$header \$(HEADER_PATH) ; done
STOP
    }
  print (MAKEFILE "\n");

  print (MAKEFILE <<STOP);
package-source:
STOP
    print (MAKEFILE <<STOP);
	\@for sub_directory in \$(SUB_DIRECTORIES) ; do (cd \$\$sub_directory && \$(MAKE) package-source) || exit ; done
STOP
print (MAKEFILE <<STOP);
	mkdir -p $root_dir/package-source/include
STOP

  print (MAKEFILE <<STOP);
	-cp -f makefile.template \$(EXTRA_FILES) $root_dir/package-source/include
STOP
     
    if (scalar @headers > 0)
    {
      print (MAKEFILE <<STOP);
	for header in \$(HEADERS) ; do cp \$\$header $root_dir/package-source/include ; done
STOP
    }

    if (scalar @sources > 0)
    {
      print (MAKEFILE <<STOP);
	for source in \$(SOURCES) ; do cp \$\$source $root_dir/package-source/include ; done
STOP
    }

  print (MAKEFILE <<STOP);
package-check: package-source
	     cd package-source && ./configure \$(ALL_ARGUMENTS) && \$(MAKE) && \$(MAKE) clean
	     find package-source -name makefile -exec rm {} ';'
	     rm package-source/config.h
STOP

  print (MAKEFILE <<STOP);
package: package-check
	rm -rf storm-0.5.0
	mv package-source storm-0.5.0
	tar cvIf storm-0.5.0.tar.bz2 storm-0.5.0
	     
STOP

  # Include automatically generated dependencies.

  if (scalar @deps > 0)
  {
    foreach my $dep (@deps)
    {
      print (MAKEFILE "-include $dep\n");
    }
  }

  print (MAKEFILE "\n");

  if (open (TEMPLATE, "include" . "/makefile.template"))
  {
    while (<TEMPLATE>)
    {
      my $row = $_;

      print (MAKEFILE $row);
    }
  }
  close (MAKEFILE);



@headers = (
);

@sources = (
'arguments.c',
'avl.c',
'avl_debug.c',
'avl_rotate.c',
'avl_update.c',
'avl_delete.c',
'debug.c',
'idle.c',
'init.c',
'kernelfs.c',
'log.c',
'mailbox.c',
'memory.c',
'service.c',
'slab.c',
'tag.c',
'time.c',
);
@objects = ('arguments.o',
'avl.o',
'avl_debug.o',
'avl_rotate.o',
'avl_update.o',
'avl_delete.o',
'debug.o',
'idle.o',
'init.o',
'kernelfs.o',
'log.o',
'mailbox.o',
'memory.o',
'service.o',
'slab.o',
'tag.o',
'time.o',
);
@deps = ('arguments.dep',
'avl.dep',
'avl_debug.dep',
'avl_rotate.dep',
'avl_update.dep',
'avl_delete.dep',
'debug.dep',
'idle.dep',
'init.dep',
'kernelfs.dep',
'log.dep',
'mailbox.dep',
'memory.dep',
'service.dep',
'slab.dep',
'tag.dep',
'time.dep',
);
  print "Writing generic/makefile...
";
  open (MAKEFILE, '>' . "generic/makefile") or
    die ("Could not write to generic/makefile: $!\n");
 
# Write the default rules we want.

  print (MAKEFILE <<STOP);
# This makefile was generated by autochaos 0.2.0. Please do not
# tamper with it unless you are very certain about what you are doing.

ALL_ARGUMENTS = $all_arguments

PREFIX = $chaos_root
PACKAGE = storm

# Compiler flags.

CFLAGS = -Wall -W -Wshadow -Wpointer-arith -Waggregate-return \\
-Wstrict-prototypes -Wredundant-decls -Winline -Wmissing-prototypes \\
-Werror -Wcast-align -Wbad-function-cast -Wsign-compare \\
-Wmissing-declarations -Wmissing-noreturns -pipe \\
-Wnested-externs -O3 -fno-builtin -funsigned-char -g -fomit-frame-pointer -ffreestanding \$(EXTRA_CFLAGS) \$(DEFINES)

INCLUDES = \\
STOP
  print MAKEFILE "-I../include \\\
";
  print MAKEFILE "-I.. \\\
";
print (MAKEFILE <<STOP);
-I. -I\$(PREFIX)/data/programming/c/headers
STOP
    print MAKEFILE "
ALL_OBJECTS =";
      print MAKEFILE " \\\
generic/arguments.o";
      print MAKEFILE " \\\
generic/avl.o";
      print MAKEFILE " \\\
generic/avl_debug.o";
      print MAKEFILE " \\\
generic/avl_rotate.o";
      print MAKEFILE " \\\
generic/avl_update.o";
      print MAKEFILE " \\\
generic/avl_delete.o";
      print MAKEFILE " \\\
generic/debug.o";
      print MAKEFILE " \\\
generic/idle.o";
      print MAKEFILE " \\\
generic/init.o";
      print MAKEFILE " \\\
generic/kernelfs.o";
      print MAKEFILE " \\\
generic/log.o";
      print MAKEFILE " \\\
generic/mailbox.o";
      print MAKEFILE " \\\
generic/memory.o";
      print MAKEFILE " \\\
generic/service.o";
      print MAKEFILE " \\\
generic/slab.o";
      print MAKEFILE " \\\
generic/tag.o";
      print MAKEFILE " \\\
generic/time.o";
    print MAKEFILE "
";
print (MAKEFILE <<STOP);

STATIC_LIBRARY_PATH = \$(PREFIX)/data/programming/libraries/static

# Ideally, this would be -lwhatever, but we have not started patching
# the GNU tools yet...

STOP

  print (MAKEFILE "LIBS = ");
  foreach my $library (@libraries)
  {
    print MAKEFILE "\\\
\$(STATIC_LIBRARY_PATH)/library_$library.a ";
  }

  if (scalar @objects > 0)
  {
    print MAKEFILE "\n\nOBJECTS = ";
    foreach my $object (@objects)
    {
      print MAKEFILE " \\\
$object";
    }
    print MAKEFILE "\
";
  }

  if (scalar @headers > 0)
  {
    print MAKEFILE "\n\nHEADERS = ";
    foreach my $header (@headers)
    {
      print MAKEFILE " \\\
$header";
    }
    print MAKEFILE "\
";
  }

  if (scalar @sources > 0)
  {
    print MAKEFILE "\n\nSOURCES = ";
    foreach my $source (@sources)
    {
      print MAKEFILE " \\\
$source";
    }
    print MAKEFILE "\
";
    
  }

  print (MAKEFILE <<STOP);

HEADER_PATH = \$(PREFIX)/data/programming/c/headers/\$(PACKAGE)/generic

# TODO: Those should be overridable.

CC = gcc
NASM = nasm
AR = ar
RANLIB = ranlib
GZIP = gzip -f

%.o: %.c
	\@echo Compiling \$<...
	\@\$(CC) -o \$(@) \$(CFLAGS) \$(INCLUDES) \$(DEFS) -c \$<
	\@\$(CC) -M \$< \$(CFLAGS) \$(INCLUDES) \$(DEFS) > \$(*F).dep

%.o: %.S
	\@echo Compiling \$<...
	\@\$(CC) -o \$(@) \$(CFLAGS) \$(INCLUDES) \$(DEFS) -c \$<
	\@\$(CC) -M \$< \$(CFLAGS) \$(INCLUDES) \$(DEFS) > \$(*F).dep

%.o: %.asm
	\$(NASM) -o \$(@) \$< -f elf

.PHONY: splash all clean install package-source

STOP
 
  {
    my $target = "\$(OBJECTS)" if (scalar @objects);

    unless ($target)
    {
      $target = "";
    }

    print (MAKEFILE <<STOP);
all: splash makefile $target
STOP

  }
    if (!(scalar @objects) && '\$(OBJECTS)' ne '\$(OBJECTS)')
    {
  print (MAKEFILE <<STOP);
	\@\$(MAKE) \$(OBJECTS)
STOP
    }
  print (MAKEFILE <<STOP);

clean: makefile
STOP
  if (scalar @objects > 0)
  {
    print MAKEFILE "	rm -f \$(OBJECTS)
";
  }
  print (MAKEFILE <<STOP);
	rm -f *.dep
	-\$(MAKE) clean-local
STOP
     print MAKEFILE "splash:

";
     print (MAKEFILE <<STOP);

LDFLAGS = -nostdlib -Wl,-T,current-arch/kernel.ld -lgcc \$(EXTRA_LDFLAGS)

storm: \$(OBJECTS) \$(ALL_OBJECTS)
	\@echo "Linking..."
	\@\$(CC) -o \$(\@) \$(OBJECTS) \$(ALL_OBJECTS) \$(LIBS) \$(LDFLAGS)

install: all
STOP
  print (MAKEFILE "\n");

  print (MAKEFILE <<STOP);
package-source:
STOP
print (MAKEFILE <<STOP);
	mkdir -p $root_dir/package-source/generic
STOP

  print (MAKEFILE <<STOP);
	-cp -f makefile.template \$(EXTRA_FILES) $root_dir/package-source/generic
STOP
     
    if (scalar @headers > 0)
    {
      print (MAKEFILE <<STOP);
	for header in \$(HEADERS) ; do cp \$\$header $root_dir/package-source/generic ; done
STOP
    }

    if (scalar @sources > 0)
    {
      print (MAKEFILE <<STOP);
	for source in \$(SOURCES) ; do cp \$\$source $root_dir/package-source/generic ; done
STOP
    }

  print (MAKEFILE <<STOP);
package-check: package-source
	     cd package-source && ./configure \$(ALL_ARGUMENTS) && \$(MAKE) && \$(MAKE) clean
	     find package-source -name makefile -exec rm {} ';'
	     rm package-source/config.h
STOP

  print (MAKEFILE <<STOP);
package: package-check
	rm -rf storm-0.5.0
	mv package-source storm-0.5.0
	tar cvIf storm-0.5.0.tar.bz2 storm-0.5.0
	     
STOP

  # Include automatically generated dependencies.

  if (scalar @deps > 0)
  {
    foreach my $dep (@deps)
    {
      print (MAKEFILE "-include $dep\n");
    }
  }

  print (MAKEFILE "\n");

  if (open (TEMPLATE, "generic" . "/makefile.template"))
  {
    while (<TEMPLATE>)
    {
      my $row = $_;

      print (MAKEFILE $row);
    }
  }
  close (MAKEFILE);



@headers = (
'cluster.h',
'cpu.h',
'cpuid.h',
'debug.h',
'defines.h',
'descriptor.h',
'dma.h',
'flags.h',
'gdt.h',
'idt.h',
'irq.h',
'memory.h',
'memory_virtual.h',
'mutex.h',
'port.h',
'string.h',
'system_calls.h',
'thread.h',
'timer.h',
'trap.h',
'tss.h',
'types.h',
'wrapper.h',
);

@sources = (
);
@objects = ();
@deps = ();
  print "Writing include/storm/ia32/makefile...
";
  open (MAKEFILE, '>' . "include/storm/ia32/makefile") or
    die ("Could not write to include/storm/ia32/makefile: $!\n");
 
# Write the default rules we want.

  print (MAKEFILE <<STOP);
# This makefile was generated by autochaos 0.2.0. Please do not
# tamper with it unless you are very certain about what you are doing.

ALL_ARGUMENTS = $all_arguments

PREFIX = $chaos_root
PACKAGE = storm

# Compiler flags.

CFLAGS = -Wall -W -Wshadow -Wpointer-arith -Waggregate-return \\
-Wstrict-prototypes -Wredundant-decls -Winline -Wmissing-prototypes \\
-Werror -Wcast-align -Wbad-function-cast -Wsign-compare \\
-Wmissing-declarations -Wmissing-noreturns -pipe \\
-Wnested-externs -O3 -fno-builtin -funsigned-char -g -fomit-frame-pointer -ffreestanding \$(EXTRA_CFLAGS) \$(DEFINES)

INCLUDES = \\
STOP
  print MAKEFILE "-I../include \\\
";
  print MAKEFILE "-I.. \\\
";
print (MAKEFILE <<STOP);
-I. -I\$(PREFIX)/data/programming/c/headers
STOP
    print MAKEFILE "
ALL_OBJECTS =";
      print MAKEFILE " \\\
generic/arguments.o";
      print MAKEFILE " \\\
generic/avl.o";
      print MAKEFILE " \\\
generic/avl_debug.o";
      print MAKEFILE " \\\
generic/avl_rotate.o";
      print MAKEFILE " \\\
generic/avl_update.o";
      print MAKEFILE " \\\
generic/avl_delete.o";
      print MAKEFILE " \\\
generic/debug.o";
      print MAKEFILE " \\\
generic/idle.o";
      print MAKEFILE " \\\
generic/init.o";
      print MAKEFILE " \\\
generic/kernelfs.o";
      print MAKEFILE " \\\
generic/log.o";
      print MAKEFILE " \\\
generic/mailbox.o";
      print MAKEFILE " \\\
generic/memory.o";
      print MAKEFILE " \\\
generic/service.o";
      print MAKEFILE " \\\
generic/slab.o";
      print MAKEFILE " \\\
generic/tag.o";
      print MAKEFILE " \\\
generic/time.o";
    print MAKEFILE "
";
print (MAKEFILE <<STOP);

STATIC_LIBRARY_PATH = \$(PREFIX)/data/programming/libraries/static

# Ideally, this would be -lwhatever, but we have not started patching
# the GNU tools yet...

STOP

  print (MAKEFILE "LIBS = ");
  foreach my $library (@libraries)
  {
    print MAKEFILE "\\\
\$(STATIC_LIBRARY_PATH)/library_$library.a ";
  }

  if (scalar @objects > 0)
  {
    print MAKEFILE "\n\nOBJECTS = ";
    foreach my $object (@objects)
    {
      print MAKEFILE " \\\
$object";
    }
    print MAKEFILE "\
";
  }

  if (scalar @headers > 0)
  {
    print MAKEFILE "\n\nHEADERS = ";
    foreach my $header (@headers)
    {
      print MAKEFILE " \\\
$header";
    }
    print MAKEFILE "\
";
  }

  if (scalar @sources > 0)
  {
    print MAKEFILE "\n\nSOURCES = ";
    foreach my $source (@sources)
    {
      print MAKEFILE " \\\
$source";
    }
    print MAKEFILE "\
";
    
  }

  print (MAKEFILE <<STOP);

HEADER_PATH = \$(PREFIX)/data/programming/c/headers/\$(PACKAGE)//ia32

# TODO: Those should be overridable.

CC = gcc
NASM = nasm
AR = ar
RANLIB = ranlib
GZIP = gzip -f

%.o: %.c
	\@echo Compiling \$<...
	\@\$(CC) -o \$(@) \$(CFLAGS) \$(INCLUDES) \$(DEFS) -c \$<
	\@\$(CC) -M \$< \$(CFLAGS) \$(INCLUDES) \$(DEFS) > \$(*F).dep

%.o: %.S
	\@echo Compiling \$<...
	\@\$(CC) -o \$(@) \$(CFLAGS) \$(INCLUDES) \$(DEFS) -c \$<
	\@\$(CC) -M \$< \$(CFLAGS) \$(INCLUDES) \$(DEFS) > \$(*F).dep

%.o: %.asm
	\$(NASM) -o \$(@) \$< -f elf

.PHONY: splash all clean install package-source

STOP
 
  {
    my $target = "\$(OBJECTS)" if (scalar @objects);

    unless ($target)
    {
      $target = "";
    }

    print (MAKEFILE <<STOP);
all: splash makefile $target
STOP

  }
    if (!(scalar @objects) && '\$(OBJECTS)' ne '\$(OBJECTS)')
    {
  print (MAKEFILE <<STOP);
	\@\$(MAKE) \$(OBJECTS)
STOP
    }
  print (MAKEFILE <<STOP);

clean: makefile
STOP
  if (scalar @objects > 0)
  {
    print MAKEFILE "	rm -f \$(OBJECTS)
";
  }
  print (MAKEFILE <<STOP);
	rm -f *.dep
	-\$(MAKE) clean-local
STOP
     print MAKEFILE "splash:

";
     print (MAKEFILE <<STOP);

LDFLAGS = -nostdlib -Wl,-T,current-arch/kernel.ld -lgcc \$(EXTRA_LDFLAGS)

storm: \$(OBJECTS) \$(ALL_OBJECTS)
	\@echo "Linking..."
	\@\$(CC) -o \$(\@) \$(OBJECTS) \$(ALL_OBJECTS) \$(LIBS) \$(LDFLAGS)

install: all
STOP
  print (MAKEFILE "\n");

  print (MAKEFILE <<STOP);
package-source:
STOP
print (MAKEFILE <<STOP);
	mkdir -p $root_dir/package-source/include/storm/ia32
STOP

  print (MAKEFILE <<STOP);
	-cp -f makefile.template \$(EXTRA_FILES) $root_dir/package-source/include/storm/ia32
STOP
     
    if (scalar @headers > 0)
    {
      print (MAKEFILE <<STOP);
	for header in \$(HEADERS) ; do cp \$\$header $root_dir/package-source/include/storm/ia32 ; done
STOP
    }

    if (scalar @sources > 0)
    {
      print (MAKEFILE <<STOP);
	for source in \$(SOURCES) ; do cp \$\$source $root_dir/package-source/include/storm/ia32 ; done
STOP
    }

  print (MAKEFILE <<STOP);
package-check: package-source
	     cd package-source && ./configure \$(ALL_ARGUMENTS) && \$(MAKE) && \$(MAKE) clean
	     find package-source -name makefile -exec rm {} ';'
	     rm package-source/config.h
STOP

  print (MAKEFILE <<STOP);
package: package-check
	rm -rf storm-0.5.0
	mv package-source storm-0.5.0
	tar cvIf storm-0.5.0.tar.bz2 storm-0.5.0
	     
STOP

  # Include automatically generated dependencies.

  if (scalar @deps > 0)
  {
    foreach my $dep (@deps)
    {
      print (MAKEFILE "-include $dep\n");
    }
  }

  print (MAKEFILE "\n");

  if (open (TEMPLATE, "include/storm/ia32" . "/makefile.template"))
  {
    while (<TEMPLATE>)
    {
      my $row = $_;

      print (MAKEFILE $row);
    }
  }
  close (MAKEFILE);



@headers = (
);

@sources = (
'cluster.c',
'cpuid.c',
'debug.c',
'dispatch.c',
'dma.c',
'elf.c',
'gdt.c',
'idt.c',
'init.c',
'irq.c',
'irq_handlers.S',
'limits.c',
'main.c',
'memory.c',
'memory_global.c',
'memory_physical.c',
'memory_virtual.c',
'multiboot.c',
'mutex.c',
'port.c',
'process.c',
'schedule.c',
'string.c',
'system_calls-auto.c',
'system_calls.c',
'thread.c',
'time.c',
'timer.c',
'trap.c',
'wrapper.c',
);
@objects = ('cluster.o',
'cpuid.o',
'debug.o',
'dispatch.o',
'dma.o',
'elf.o',
'gdt.o',
'idt.o',
'init.o',
'irq.o',
'irq_handlers.o',
'limits.o',
'main.o',
'memory.o',
'memory_global.o',
'memory_physical.o',
'memory_virtual.o',
'multiboot.o',
'mutex.o',
'port.o',
'process.o',
'schedule.o',
'string.o',
'system_calls-auto.o',
'system_calls.o',
'thread.o',
'time.o',
'timer.o',
'trap.o',
'wrapper.o',
);
@deps = ('cluster.dep',
'cpuid.dep',
'debug.dep',
'dispatch.dep',
'dma.dep',
'elf.dep',
'gdt.dep',
'idt.dep',
'init.dep',
'irq.dep',
'irq_handlers.dep',
'limits.dep',
'main.dep',
'memory.dep',
'memory_global.dep',
'memory_physical.dep',
'memory_virtual.dep',
'multiboot.dep',
'mutex.dep',
'port.dep',
'process.dep',
'schedule.dep',
'string.dep',
'system_calls-auto.dep',
'system_calls.dep',
'thread.dep',
'time.dep',
'timer.dep',
'trap.dep',
'wrapper.dep',
);
  print "Writing ia32/makefile...
";
  open (MAKEFILE, '>' . "ia32/makefile") or
    die ("Could not write to ia32/makefile: $!\n");
 
# Write the default rules we want.

  print (MAKEFILE <<STOP);
# This makefile was generated by autochaos 0.2.0. Please do not
# tamper with it unless you are very certain about what you are doing.

ALL_ARGUMENTS = $all_arguments

PREFIX = $chaos_root
PACKAGE = storm

# Compiler flags.

CFLAGS = -Wall -W -Wshadow -Wpointer-arith -Waggregate-return \\
-Wstrict-prototypes -Wredundant-decls -Winline -Wmissing-prototypes \\
-Werror -Wcast-align -Wbad-function-cast -Wsign-compare \\
-Wmissing-declarations -Wmissing-noreturns -pipe \\
-Wnested-externs -O3 -fno-builtin -funsigned-char -g -fomit-frame-pointer -ffreestanding \$(EXTRA_CFLAGS) \$(DEFINES)

INCLUDES = \\
STOP
  print MAKEFILE "-I../include \\\
";
  print MAKEFILE "-I.. \\\
";
print (MAKEFILE <<STOP);
-I. -I\$(PREFIX)/data/programming/c/headers
STOP
    print MAKEFILE "
ALL_OBJECTS =";
      print MAKEFILE " \\\
generic/arguments.o";
      print MAKEFILE " \\\
generic/avl.o";
      print MAKEFILE " \\\
generic/avl_debug.o";
      print MAKEFILE " \\\
generic/avl_rotate.o";
      print MAKEFILE " \\\
generic/avl_update.o";
      print MAKEFILE " \\\
generic/avl_delete.o";
      print MAKEFILE " \\\
generic/debug.o";
      print MAKEFILE " \\\
generic/idle.o";
      print MAKEFILE " \\\
generic/init.o";
      print MAKEFILE " \\\
generic/kernelfs.o";
      print MAKEFILE " \\\
generic/log.o";
      print MAKEFILE " \\\
generic/mailbox.o";
      print MAKEFILE " \\\
generic/memory.o";
      print MAKEFILE " \\\
generic/service.o";
      print MAKEFILE " \\\
generic/slab.o";
      print MAKEFILE " \\\
generic/tag.o";
      print MAKEFILE " \\\
generic/time.o";
      print MAKEFILE " \\\
ia32/cluster.o";
      print MAKEFILE " \\\
ia32/cpuid.o";
      print MAKEFILE " \\\
ia32/debug.o";
      print MAKEFILE " \\\
ia32/dispatch.o";
      print MAKEFILE " \\\
ia32/dma.o";
      print MAKEFILE " \\\
ia32/elf.o";
      print MAKEFILE " \\\
ia32/gdt.o";
      print MAKEFILE " \\\
ia32/idt.o";
      print MAKEFILE " \\\
ia32/init.o";
      print MAKEFILE " \\\
ia32/irq.o";
      print MAKEFILE " \\\
ia32/irq_handlers.o";
      print MAKEFILE " \\\
ia32/limits.o";
      print MAKEFILE " \\\
ia32/main.o";
      print MAKEFILE " \\\
ia32/memory.o";
      print MAKEFILE " \\\
ia32/memory_global.o";
      print MAKEFILE " \\\
ia32/memory_physical.o";
      print MAKEFILE " \\\
ia32/memory_virtual.o";
      print MAKEFILE " \\\
ia32/multiboot.o";
      print MAKEFILE " \\\
ia32/mutex.o";
      print MAKEFILE " \\\
ia32/port.o";
      print MAKEFILE " \\\
ia32/process.o";
      print MAKEFILE " \\\
ia32/schedule.o";
      print MAKEFILE " \\\
ia32/string.o";
      print MAKEFILE " \\\
ia32/system_calls-auto.o";
      print MAKEFILE " \\\
ia32/system_calls.o";
      print MAKEFILE " \\\
ia32/thread.o";
      print MAKEFILE " \\\
ia32/time.o";
      print MAKEFILE " \\\
ia32/timer.o";
      print MAKEFILE " \\\
ia32/trap.o";
      print MAKEFILE " \\\
ia32/wrapper.o";
    print MAKEFILE "
";
print (MAKEFILE <<STOP);

STATIC_LIBRARY_PATH = \$(PREFIX)/data/programming/libraries/static

# Ideally, this would be -lwhatever, but we have not started patching
# the GNU tools yet...

STOP

  print (MAKEFILE "LIBS = ");
  foreach my $library (@libraries)
  {
    print MAKEFILE "\\\
\$(STATIC_LIBRARY_PATH)/library_$library.a ";
  }

  if (scalar @objects > 0)
  {
    print MAKEFILE "\n\nOBJECTS = ";
    foreach my $object (@objects)
    {
      print MAKEFILE " \\\
$object";
    }
    print MAKEFILE "\
";
  }

  if (scalar @headers > 0)
  {
    print MAKEFILE "\n\nHEADERS = ";
    foreach my $header (@headers)
    {
      print MAKEFILE " \\\
$header";
    }
    print MAKEFILE "\
";
  }

  if (scalar @sources > 0)
  {
    print MAKEFILE "\n\nSOURCES = ";
    foreach my $source (@sources)
    {
      print MAKEFILE " \\\
$source";
    }
    print MAKEFILE "\
";
    
  }

  print (MAKEFILE <<STOP);

HEADER_PATH = \$(PREFIX)/data/programming/c/headers/\$(PACKAGE)/ia32

# TODO: Those should be overridable.

CC = gcc
NASM = nasm
AR = ar
RANLIB = ranlib
GZIP = gzip -f

%.o: %.c
	\@echo Compiling \$<...
	\@\$(CC) -o \$(@) \$(CFLAGS) \$(INCLUDES) \$(DEFS) -c \$<
	\@\$(CC) -M \$< \$(CFLAGS) \$(INCLUDES) \$(DEFS) > \$(*F).dep

%.o: %.S
	\@echo Compiling \$<...
	\@\$(CC) -o \$(@) \$(CFLAGS) \$(INCLUDES) \$(DEFS) -c \$<
	\@\$(CC) -M \$< \$(CFLAGS) \$(INCLUDES) \$(DEFS) > \$(*F).dep

%.o: %.asm
	\$(NASM) -o \$(@) \$< -f elf

.PHONY: splash all clean install package-source

STOP
 
  {
    my $target = "\$(OBJECTS)" if (scalar @objects);

    unless ($target)
    {
      $target = "";
    }

    print (MAKEFILE <<STOP);
all: splash makefile $target
STOP

  }
    if (!(scalar @objects) && '\$(OBJECTS)' ne '\$(OBJECTS)')
    {
  print (MAKEFILE <<STOP);
	\@\$(MAKE) \$(OBJECTS)
STOP
    }
  print (MAKEFILE <<STOP);

clean: makefile
STOP
  if (scalar @objects > 0)
  {
    print MAKEFILE "	rm -f \$(OBJECTS)
";
  }
  print (MAKEFILE <<STOP);
	rm -f *.dep
	-\$(MAKE) clean-local
STOP
     print MAKEFILE "splash:

";
     print (MAKEFILE <<STOP);

LDFLAGS = -nostdlib -Wl,-T,current-arch/kernel.ld -lgcc \$(EXTRA_LDFLAGS)

storm: \$(OBJECTS) \$(ALL_OBJECTS)
	\@echo "Linking..."
	\@\$(CC) -o \$(\@) \$(OBJECTS) \$(ALL_OBJECTS) \$(LIBS) \$(LDFLAGS)

install: all
STOP
  print (MAKEFILE "\n");

  print (MAKEFILE <<STOP);
package-source:
STOP
print (MAKEFILE <<STOP);
	mkdir -p $root_dir/package-source/ia32
STOP

  print (MAKEFILE <<STOP);
	-cp -f makefile.template \$(EXTRA_FILES) $root_dir/package-source/ia32
STOP
     
    if (scalar @headers > 0)
    {
      print (MAKEFILE <<STOP);
	for header in \$(HEADERS) ; do cp \$\$header $root_dir/package-source/ia32 ; done
STOP
    }

    if (scalar @sources > 0)
    {
      print (MAKEFILE <<STOP);
	for source in \$(SOURCES) ; do cp \$\$source $root_dir/package-source/ia32 ; done
STOP
    }

  print (MAKEFILE <<STOP);
package-check: package-source
	     cd package-source && ./configure \$(ALL_ARGUMENTS) && \$(MAKE) && \$(MAKE) clean
	     find package-source -name makefile -exec rm {} ';'
	     rm package-source/config.h
STOP

  print (MAKEFILE <<STOP);
package: package-check
	rm -rf storm-0.5.0
	mv package-source storm-0.5.0
	tar cvIf storm-0.5.0.tar.bz2 storm-0.5.0
	     
STOP

  # Include automatically generated dependencies.

  if (scalar @deps > 0)
  {
    foreach my $dep (@deps)
    {
      print (MAKEFILE "-include $dep\n");
    }
  }

  print (MAKEFILE "\n");

  if (open (TEMPLATE, "ia32" . "/makefile.template"))
  {
    while (<TEMPLATE>)
    {
      my $row = $_;

      print (MAKEFILE $row);
    }
  }
  close (MAKEFILE);



@headers = (
);

@sources = (
);
@objects = ();
@deps = ();
  print "Writing ./makefile...
";
  open (MAKEFILE, '>' . "./makefile") or
    die ("Could not write to ./makefile: $!\n");
 
# Write the default rules we want.

  print (MAKEFILE <<STOP);
# This makefile was generated by autochaos 0.2.0. Please do not
# tamper with it unless you are very certain about what you are doing.

ALL_ARGUMENTS = $all_arguments

PREFIX = $chaos_root
PACKAGE = storm

# Compiler flags.

CFLAGS = -Wall -W -Wshadow -Wpointer-arith -Waggregate-return \\
-Wstrict-prototypes -Wredundant-decls -Winline -Wmissing-prototypes \\
-Werror -Wcast-align -Wbad-function-cast -Wsign-compare \\
-Wmissing-declarations -Wmissing-noreturns -pipe \\
-Wnested-externs -O3 -fno-builtin -funsigned-char -g -fomit-frame-pointer -ffreestanding \$(EXTRA_CFLAGS) \$(DEFINES)

INCLUDES = \\
STOP
  print MAKEFILE "-I../include \\\
";
  print MAKEFILE "-I.. \\\
";
print (MAKEFILE <<STOP);
-I. -I\$(PREFIX)/data/programming/c/headers
STOP
  print MAKEFILE "\
SUB_DIRECTORIES =";
  print MAKEFILE " \\\
include";
  print MAKEFILE " \\\
generic";
  print MAKEFILE " \\\
ia32";
    print MAKEFILE "
ALL_OBJECTS =";
      print MAKEFILE " \\\
generic/arguments.o";
      print MAKEFILE " \\\
generic/avl.o";
      print MAKEFILE " \\\
generic/avl_debug.o";
      print MAKEFILE " \\\
generic/avl_rotate.o";
      print MAKEFILE " \\\
generic/avl_update.o";
      print MAKEFILE " \\\
generic/avl_delete.o";
      print MAKEFILE " \\\
generic/debug.o";
      print MAKEFILE " \\\
generic/idle.o";
      print MAKEFILE " \\\
generic/init.o";
      print MAKEFILE " \\\
generic/kernelfs.o";
      print MAKEFILE " \\\
generic/log.o";
      print MAKEFILE " \\\
generic/mailbox.o";
      print MAKEFILE " \\\
generic/memory.o";
      print MAKEFILE " \\\
generic/service.o";
      print MAKEFILE " \\\
generic/slab.o";
      print MAKEFILE " \\\
generic/tag.o";
      print MAKEFILE " \\\
generic/time.o";
      print MAKEFILE " \\\
ia32/cluster.o";
      print MAKEFILE " \\\
ia32/cpuid.o";
      print MAKEFILE " \\\
ia32/debug.o";
      print MAKEFILE " \\\
ia32/dispatch.o";
      print MAKEFILE " \\\
ia32/dma.o";
      print MAKEFILE " \\\
ia32/elf.o";
      print MAKEFILE " \\\
ia32/gdt.o";
      print MAKEFILE " \\\
ia32/idt.o";
      print MAKEFILE " \\\
ia32/init.o";
      print MAKEFILE " \\\
ia32/irq.o";
      print MAKEFILE " \\\
ia32/irq_handlers.o";
      print MAKEFILE " \\\
ia32/limits.o";
      print MAKEFILE " \\\
ia32/main.o";
      print MAKEFILE " \\\
ia32/memory.o";
      print MAKEFILE " \\\
ia32/memory_global.o";
      print MAKEFILE " \\\
ia32/memory_physical.o";
      print MAKEFILE " \\\
ia32/memory_virtual.o";
      print MAKEFILE " \\\
ia32/multiboot.o";
      print MAKEFILE " \\\
ia32/mutex.o";
      print MAKEFILE " \\\
ia32/port.o";
      print MAKEFILE " \\\
ia32/process.o";
      print MAKEFILE " \\\
ia32/schedule.o";
      print MAKEFILE " \\\
ia32/string.o";
      print MAKEFILE " \\\
ia32/system_calls-auto.o";
      print MAKEFILE " \\\
ia32/system_calls.o";
      print MAKEFILE " \\\
ia32/thread.o";
      print MAKEFILE " \\\
ia32/time.o";
      print MAKEFILE " \\\
ia32/timer.o";
      print MAKEFILE " \\\
ia32/trap.o";
      print MAKEFILE " \\\
ia32/wrapper.o";
    print MAKEFILE "
";
print (MAKEFILE <<STOP);

STATIC_LIBRARY_PATH = \$(PREFIX)/data/programming/libraries/static

# Ideally, this would be -lwhatever, but we have not started patching
# the GNU tools yet...

STOP

  print (MAKEFILE "LIBS = ");
  foreach my $library (@libraries)
  {
    print MAKEFILE "\\\
\$(STATIC_LIBRARY_PATH)/library_$library.a ";
  }

  if (scalar @objects > 0)
  {
    print MAKEFILE "\n\nOBJECTS = ";
    foreach my $object (@objects)
    {
      print MAKEFILE " \\\
$object";
    }
    print MAKEFILE "\
";
  }

  if (scalar @headers > 0)
  {
    print MAKEFILE "\n\nHEADERS = ";
    foreach my $header (@headers)
    {
      print MAKEFILE " \\\
$header";
    }
    print MAKEFILE "\
";
  }

  if (scalar @sources > 0)
  {
    print MAKEFILE "\n\nSOURCES = ";
    foreach my $source (@sources)
    {
      print MAKEFILE " \\\
$source";
    }
    print MAKEFILE "\
";
    
  }

  print (MAKEFILE <<STOP);

HEADER_PATH = \$(PREFIX)/data/programming/c/headers/\$(PACKAGE)/.

# TODO: Those should be overridable.

CC = gcc
NASM = nasm
AR = ar
RANLIB = ranlib
GZIP = gzip -f

%.o: %.c
	\@echo Compiling \$<...
	\@\$(CC) -o \$(@) \$(CFLAGS) \$(INCLUDES) \$(DEFS) -c \$<
	\@\$(CC) -M \$< \$(CFLAGS) \$(INCLUDES) \$(DEFS) > \$(*F).dep

%.o: %.S
	\@echo Compiling \$<...
	\@\$(CC) -o \$(@) \$(CFLAGS) \$(INCLUDES) \$(DEFS) -c \$<
	\@\$(CC) -M \$< \$(CFLAGS) \$(INCLUDES) \$(DEFS) > \$(*F).dep

%.o: %.asm
	\$(NASM) -o \$(@) \$< -f elf

.PHONY: splash all clean install package-source

STOP
 
  {
    my $target = "storm" if (scalar @objects);

    unless ($target)
    {
      $target = "";
    }

    print (MAKEFILE <<STOP);
all: splash makefile $target
STOP
     print (MAKEFILE <<STOP);
	\@for sub_directory in \$(SUB_DIRECTORIES) ; do (cd \$\$sub_directory && echo -e "\\n  Compiling directory: \$\$sub_directory\\n" && \$(MAKE)) || exit ; done
STOP

  }
    if (!(scalar @objects) && 'storm' ne '\$(OBJECTS)')
    {
  print (MAKEFILE <<STOP);
	\@\$(MAKE) storm
STOP
    }
  print (MAKEFILE <<STOP);

clean: makefile
STOP
    print (MAKEFILE <<STOP);
	\@for sub_directory in \$(SUB_DIRECTORIES) ; do (cd \$\$sub_directory && \$(MAKE) clean) || exit ; done
STOP
    print MAKEFILE "	rm -f storm
";
  if (scalar @objects > 0)
  {
    print MAKEFILE "	rm -f \$(OBJECTS)
";
  }
  print (MAKEFILE <<STOP);
	rm -f *.dep
	-\$(MAKE) clean-local
STOP

# FIXME: Pass all parameters to the configure script at this
# point. Also, make sure the make process is restarted. (fork?)

# FIXME: Support conditional gzipping.
     print (MAKEFILE <<STOP);
makefile: configure
	@./configure

splash:
	\@echo -e "\\n  Compiling kernel: storm...\\n"

STOP

   if ($has_autochaos)
   {
     print (MAKEFILE <<STOP);
configure: autochaos.rules
	\@autochaos

STOP
   }
     print (MAKEFILE <<STOP);

LDFLAGS = -nostdlib -Wl,-T,current-arch/kernel.ld -lgcc \$(EXTRA_LDFLAGS)

storm: \$(OBJECTS) \$(ALL_OBJECTS)
	\@echo "Linking..."
	\@\$(CC) -o \$(\@) \$(OBJECTS) \$(ALL_OBJECTS) \$(LIBS) \$(LDFLAGS)

install: all
STOP
    print (MAKEFILE <<STOP);
	\@for sub_directory in \$(SUB_DIRECTORIES) ; do (cd \$\$sub_directory && \$(MAKE) install) || exit ; done
STOP
  print (MAKEFILE <<STOP);
	mkdir -p \$(PREFIX)/system/kernel
	cp storm \$(PREFIX)/system/kernel
	strip -R .note -R .comment -R .eh_frame \$(PREFIX)/system/kernel/storm
	\$(GZIP) \$(PREFIX)/system/kernel/storm # > \$(PREFIX)/system/kernel/storm.gz
STOP

    if (scalar @headers > 0)
    {
      print (MAKEFILE <<STOP);
	mkdir -p \$(HEADER_PATH)
	for header in \$(HEADERS) ; do cp \$\$header \$(HEADER_PATH) ; done
STOP
    }
  print (MAKEFILE "\n");

  print (MAKEFILE <<STOP);
package-source:
STOP
    print (MAKEFILE <<STOP);
	\@for sub_directory in \$(SUB_DIRECTORIES) ; do (cd \$\$sub_directory && \$(MAKE) package-source) || exit ; done
STOP
print (MAKEFILE <<STOP);
	mkdir -p $root_dir/package-source/.
STOP
    print (MAKEFILE <<STOP);
	-cp -f autochaos.rules changelog configure README AUTHORS TODO INSTALL $root_dir/package-source/.
STOP

  print (MAKEFILE <<STOP);
	-cp -f makefile.template \$(EXTRA_FILES) $root_dir/package-source/.
STOP
     
    if (scalar @headers > 0)
    {
      print (MAKEFILE <<STOP);
	for header in \$(HEADERS) ; do cp \$\$header $root_dir/package-source/. ; done
STOP
    }

    if (scalar @sources > 0)
    {
      print (MAKEFILE <<STOP);
	for source in \$(SOURCES) ; do cp \$\$source $root_dir/package-source/. ; done
STOP
    }

  print (MAKEFILE <<STOP);
package-check: package-source
	     cd package-source && ./configure \$(ALL_ARGUMENTS) && \$(MAKE) && \$(MAKE) clean
	     find package-source -name makefile -exec rm {} ';'
	     rm package-source/config.h
STOP

  print (MAKEFILE <<STOP);
package: package-check
	rm -rf storm-0.5.0
	mv package-source storm-0.5.0
	tar cvIf storm-0.5.0.tar.bz2 storm-0.5.0
	     
STOP

  # Include automatically generated dependencies.

  if (scalar @deps > 0)
  {
    foreach my $dep (@deps)
    {
      print (MAKEFILE "-include $dep\n");
    }
  }

  print (MAKEFILE "\n");

  if (open (TEMPLATE, "." . "/makefile.template"))
  {
    while (<TEMPLATE>)
    {
      my $row = $_;

      print (MAKEFILE $row);
    }
  }
  close (MAKEFILE);


  # Now, also write to the config.h

  print "Writing config.h...\
";
  my $CONFIG;
  open (CONFIG, '>config.h');
  print (CONFIG <<STOP);
/* Automatically generated by autochaos 0.2.0. Not intended to be
   hand edited. */

#ifndef __CONFIG_H__
#define __CONFIG_H__

#define PACKAGE_NAME "storm"
#define PACKAGE_VERSION "0.5.0"

STOP

  foreach my $option (keys %options)
  {
    print (CONFIG "#define OPTION_" . uc ($option) . " $options{$option}\n");
  }

  foreach my $library (@libraries)
  {
    print (CONFIG "#include <$library/$library.h>\n");
  }

  print (CONFIG "\n#endif /* !__CONFIG_H__ */");

  close (CONFIG);
