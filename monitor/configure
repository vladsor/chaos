#! /usr/bin/perl -w

# Abstract: Script for configuring this package.

# Copyright 2000 chaos development. This script is in the public domain.

# Please note that this script was automatically generated by
# autochaos 0.2.1. It should not be modified. Do the changes you
# want in autochaos instead.

use strict;
use POSIX;

my $chaos_root = "/mnt/chaos";
my @libraries = ();
my @headers = ();
my @sources = ();
my @objects = ();
my @deps = ();
my $MAKEFILE;
my $TEMPLATE;
my $root_dir = getcwd ();
my %options = 
(
);

my $install_prefix_flag = 0;

foreach my $argument (@ARGV)
{
  if ($install_prefix_flag eq 1)
  {
    $chaos_root = $argument;
    $install_prefix_flag = 0;
  }
  else
  {
    if ($argument eq '--install-prefix')
    {
      $install_prefix_flag = 1;
    }
    elsif ($argument =~ m/--enable-.*$/)
    {
      (my $option) = ($argument =~ m/--enable-(.*)$/);

      if ($options{$option})
      {
        $options{$option} = 'TRUE';
      }
      else
      {
        print "Unrecognised command line option.\n";
        exit 1;
      }
    }
    elsif ($argument =~ m/--disable-.*$/)
    {
      (my $option) = ($argument =~ m/--disable-(.*)$/);

      if ($options{$option})
      {
        $options{$option} = 'FALSE';
      }
      else
      {
        print "Unrecognised command line option.\n";
        exit 1;
      }
    }
    else
    {
      print "Unrecognised command line option.\n";
      exit 1;
    }
  }
}

if ($install_prefix_flag eq 1)
{
  print "Malformed --install-prefix command option. Value missing.\n";
  exit 1;
}

print "\n  Configuring server: monitor...\n\n";

print ("Using chaos root... ($chaos_root)\n");

print ("Checking for event library... ");
if (-f "$chaos_root/data/programming/libraries/static/library_event.a")
{
  print ("found.\n");

  push (@libraries, "event");
}
else
{
  print ("not found.\n");
  print ("\nError: event is a required library. Please check your configuration.\n\n");
  exit 1;
}

print ("Checking for system library... ");
if (-f "$chaos_root/data/programming/libraries/static/library_system.a")
{
  print ("found.\n");

  push (@libraries, "system");
}
else
{
  print ("not found.\n");
  print ("\nError: system is a required library. Please check your configuration.\n\n");
  exit 1;
}

print ("Checking for console library... ");
if (-f "$chaos_root/data/programming/libraries/static/library_console.a")
{
  print ("found.\n");

  push (@libraries, "console");
}
else
{
  print ("not found.\n");
  print ("\nError: console is a required library. Please check your configuration.\n\n");
  exit 1;
}

print ("Checking for ipc library... ");
if (-f "$chaos_root/data/programming/libraries/static/library_ipc.a")
{
  print ("found.\n");

  push (@libraries, "ipc");
}
else
{
  print ("not found.\n");
  print ("\nError: ipc is a required library. Please check your configuration.\n\n");
  exit 1;
}

print ("Checking for string library... ");
if (-f "$chaos_root/data/programming/libraries/static/library_string.a")
{
  print ("found.\n");

  push (@libraries, "string");
}
else
{
  print ("not found.\n");
  print ("\nError: string is a required library. Please check your configuration.\n\n");
  exit 1;
}

print ("Checking for memory library... ");
if (-f "$chaos_root/data/programming/libraries/static/library_memory.a")
{
  print ("found.\n");

  push (@libraries, "memory");
}
else
{
  print ("not found.\n");
  print ("\nError: memory is a required library. Please check your configuration.\n\n");
  exit 1;
}


my $all_arguments = "";
foreach my $argument (@ARGV)
{
  $all_arguments .= $argument . " ";
}

print ("Checking for autochaos... ");
my $autochaos = `autochaos --version 2> /dev/null`;

my $has_autochaos;
unless ($autochaos)
{
  print ("not found.\n");
  $has_autochaos = undef;
}
else
{
  (my $version) = ($autochaos =~ m/ ([\d\.]+)$/);
  print ("found (version $version).\n");
  $has_autochaos = $version;
}



@headers = (
);

@sources = (
'monitor.c',
);
@objects = ('monitor.o',
);
@deps = ('monitor.dep',
);
  print "Writing ./makefile...
";
  open (MAKEFILE, '>' . "./makefile") or
    die ("Could not write to ./makefile: $!\n");
 
# Write the default rules we want.

  print (MAKEFILE <<STOP);
# This makefile was generated by autochaos 0.2.1. Please do not
# tamper with it unless you are very certain about what you are doing.

ALL_ARGUMENTS = $all_arguments

PREFIX = $chaos_root
PACKAGE = monitor

# Compiler flags.

CFLAGS = -Wall -W -Wshadow -Wpointer-arith -Waggregate-return \\
-Wstrict-prototypes -Wredundant-decls -Winline -Wmissing-prototypes \\
-Werror -Wcast-align -Wbad-function-cast -Wsign-compare \\
-Wmissing-declarations -Wmissing-noreturns -pipe \\
-Wnested-externs -O3 -fno-builtin -funsigned-char -g \$(EXTRA_CFLAGS) \$(DEFINES)

INCLUDES = \\
STOP
print (MAKEFILE <<STOP);
-I. -I\$(PREFIX)/data/programming/c/headers
STOP
    print MAKEFILE "
ALL_OBJECTS =";
      print MAKEFILE " \\\
./monitor.o";
    print MAKEFILE "
";
print (MAKEFILE <<STOP);

STATIC_LIBRARY_PATH = \$(PREFIX)/data/programming/libraries/static

# Ideally, this would be -lwhatever, but we have not started patching
# the GNU tools yet...

STOP

  print (MAKEFILE "LIBS = ");
  foreach my $library (@libraries)
  {
    print MAKEFILE "\\\
\$(STATIC_LIBRARY_PATH)/library_$library.a ";
  }

  if (scalar @objects > 0)
  {
    print MAKEFILE "\n\nOBJECTS = ";
    foreach my $object (@objects)
    {
      print MAKEFILE " \\\
$object";
    }
    print MAKEFILE "\
";
  }

  if (scalar @headers > 0)
  {
    print MAKEFILE "\n\nHEADERS = ";
    foreach my $header (@headers)
    {
      print MAKEFILE " \\\
$header";
    }
    print MAKEFILE "\
";
  }

  if (scalar @sources > 0)
  {
    print MAKEFILE "\n\nSOURCES = ";
    foreach my $source (@sources)
    {
      print MAKEFILE " \\\
$source";
    }
    print MAKEFILE "\
";
    
  }

  print (MAKEFILE <<STOP);

HEADER_PATH = \$(PREFIX)/data/programming/c/headers/\$(PACKAGE)/.

# TODO: Those should be overridable.

CC = gcc
NASM = nasm
AR = ar
RANLIB = ranlib
GZIP = gzip -f

%.o: %.c
	\@echo Compiling \$<...
	\@\$(CC) -o \$(@) \$(CFLAGS) \$(INCLUDES) \$(DEFS) -c \$<
	\@\$(CC) -M \$< \$(CFLAGS) \$(INCLUDES) \$(DEFS) > \$(*F).dep

%.o: %.S
	\@echo Compiling \$<...
	\@\$(CC) -o \$(@) \$(CFLAGS) \$(INCLUDES) \$(DEFS) -c \$<
	\@\$(CC) -M \$< \$(CFLAGS) \$(INCLUDES) \$(DEFS) > \$(*F).dep

%.o: %.asm
	\$(NASM) -o \$(@) \$< -f elf

.PHONY: splash all clean install package-source package-check package

STOP
 
  {
    my $target = "monitor" if (scalar @objects);

    unless ($target)
    {
      $target = "";
    }

    print (MAKEFILE <<STOP);
all: splash makefile $target
STOP

  }
    if (!(scalar @objects) && 'monitor' ne '\$(OBJECTS)')
    {
  print (MAKEFILE <<STOP);
	\@\$(MAKE) monitor
STOP
    }
  print (MAKEFILE <<STOP);

clean:
STOP
    print MAKEFILE "	rm -f monitor
";
  if (scalar @objects > 0)
  {
    print MAKEFILE "	rm -f \$(OBJECTS)
";
  }
  print (MAKEFILE <<STOP);
	rm -f *.dep
	-\$(MAKE) clean-local
STOP

# FIXME: Pass all parameters to the configure script at this
# point. Also, make sure the make process is restarted. (fork?)

# FIXME: Support conditional gzipping.
     print (MAKEFILE <<STOP);
makefile: configure
	@./configure

splash:
	\@echo -e "\\n  Compiling server: monitor...\\n"

STOP

   if ($has_autochaos)
   {
     print (MAKEFILE <<STOP);
configure: autochaos.rules
	\@autochaos

STOP
   }
     print (MAKEFILE <<STOP);

LDFLAGS = \$(PREFIX)/data/programming/c/startup/startup.o \\
-nostdlib -Wl,-T,\$(PREFIX)/data/programming/linker/chaos.ld -lgcc \$(EXTRA_LDFLAGS)

monitor: \$(OBJECTS)
	\@echo "Linking..."
	\@\$(CC) -o \$(\@) \$(OBJECTS) \$(LIBS) \$(LDFLAGS)

install: all
	\@echo "Installing..."
	\@mkdir -p \$(PREFIX)/system/servers
	\@cp monitor \$(PREFIX)/system/servers
	\@strip -R .note -R .comment -R .eh_frame \$(PREFIX)/system/servers/monitor
	\@\$(GZIP) \$(PREFIX)/system/servers/monitor # > \$(PREFIX)/system/servers/monitor.gz
STOP
  print (MAKEFILE "\n");

  print (MAKEFILE <<STOP);
package-source:
STOP
print (MAKEFILE <<STOP);
	mkdir -p $root_dir/package-source/.
STOP
    print (MAKEFILE <<STOP);
	-cp -f autochaos.rules changelog configure COPYING README AUTHORS TODO INSTALL $root_dir/package-source/.
STOP

  print (MAKEFILE <<STOP);
	-cp -f makefile.template \$(EXTRA_FILES) $root_dir/package-source/.
STOP
     
    if (scalar @headers > 0)
    {
      print (MAKEFILE <<STOP);
	for header in \$(HEADERS) ; do cp \$\$header $root_dir/package-source/. || exit ; done
STOP
    }

    if (scalar @sources > 0)
    {
      print (MAKEFILE <<STOP);
	for source in \$(SOURCES) ; do cp \$\$source $root_dir/package-source/. || exit ; done
STOP
    }

  print (MAKEFILE <<STOP);
package-check: package-source
	     cd package-source && ./configure \$(ALL_ARGUMENTS) && \$(MAKE) && \$(MAKE) clean
	     find package-source -name makefile -exec rm {} ';'
	     rm package-source/config.h
STOP

  print (MAKEFILE <<STOP);
package: package-check
	rm -rf monitor-0.0.1
	mv package-source monitor-0.0.1
	tar cvIf monitor-0.0.1.tar.bz2 monitor-0.0.1
	     
STOP

  # Include automatically generated dependencies.

  if (scalar @deps > 0)
  {
    foreach my $dep (@deps)
    {
      print (MAKEFILE "-include $dep\n");
    }
  }

  print (MAKEFILE "\n");

  if (open (TEMPLATE, "." . "/makefile.template"))
  {
    while (<TEMPLATE>)
    {
      my $row = $_;

      print (MAKEFILE $row);
    }
  }
  close (MAKEFILE);


  # Now, also write to the config.h

  print "Writing config.h...\
";
  my $CONFIG;
  open (CONFIG, '>config.h');
  print (CONFIG <<STOP);
/* Automatically generated by autochaos 0.2.1. Not intended to be
   hand edited. */

#ifndef __CONFIG_H__
#define __CONFIG_H__

#define PACKAGE_NAME "monitor"
#define PACKAGE_VERSION "0.0.1"

STOP

  foreach my $option (keys %options)
  {
    print (CONFIG "#define OPTION_" . uc ($option) . " $options{$option}\n");
  }

  foreach my $library (@libraries)
  {
    print (CONFIG "#include <$library/$library.h>\n");
  }

  print (CONFIG "\n#endif /* !__CONFIG_H__ */");

  close (CONFIG);
